apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  description: >
    Pipeline that clones the repo, installs dependencies, lints the code,
    runs tests with coverage, builds an image, deploys to OpenShift, and cleans up.
  workspaces:
    - name: pipeline-workspace
  params:
    - name: repo-url
      type: string
    - name: branch
      type: string
      default: main
    - name: build-image
      type: string

  tasks:
    # 1️⃣ Prepare workspace (fix permissions)
    - name: prepare-workspace
      taskSpec:
        steps:
          - name: fix-permissions
            image: alpine:3.17
            script: |
              set -e
              find /workspace/output -type f -exec chmod 666 {} \;
              find /workspace/output -type d -exec chmod 777 {} \;
              find /workspace/output -name "*.pyc" -exec chmod 666 {} \;
      workspaces:
        - name: output
          workspace: pipeline-workspace

    # 2️⃣ Clone Repo
    - name: clone
      runAfter:
        - prepare-workspace
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: pipeline-workspace
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch)

    # 3️⃣ Install Dependencies
    - name: install-deps
      runAfter:
        - clone
      taskSpec:
        steps:
          - name: install
            image: python:3.9
            workingDir: /workspace/output
            script: |
              set -e

              # Fix permissions before install
              find /workspace/output -type f -exec chmod 666 {} \;
              find /workspace/output -type d -exec chmod 777 {} \;
              find /workspace/output -name "*.pyc" -delete || true

              # Install system packages
              apt-get update && apt-get install -y libpq-dev gcc

              # Upgrade pip and wheel
              python -m pip install --upgrade pip wheel

              # Install Python dependencies if requirements.txt exists
              if [ -f requirements.txt ]; then
                pip install --no-cache-dir -r requirements.txt
              else
                echo "⚠️  requirements.txt not found, skipping pip install."
              fi

    # 4️⃣ Lint code
    - name: lint
      runAfter:
        - install-deps
      taskSpec:
        steps:
          - name: flake8-lint
            image: python:3.9
            workingDir: /workspace/output
            script: |
              set -e
              pip install --upgrade pip
              pip install flake8
              flake8 service || true

    # 5️⃣ Run Tests with Coverage
    - name: tests
      runAfter:
        - install-deps
      taskSpec:
        steps:
          - name: run-tests
            image: python:3.9
            workingDir: /workspace/output
            script: |
              set -e
              pip install --no-cache-dir -r requirements.txt || true
              pip install coverage nose
              coverage run --source=service -m nose
              coverage report --fail-under=95 || true
              coverage xml || true

    # 6️⃣ Build Container
    - name: build
      runAfter:
        - lint
        - tests
      taskRef:
        name: buildah
        kind: ClusterTask
      workspaces:
        - name: source
          workspace: pipeline-workspace
      params:
        - name: IMAGE
          value: "$(params.build-image)"

    # 7️⃣ Deploy to OpenShift
    - name: deploy
      runAfter:
        - build
      taskRef:
        name: openshift-client
        kind: ClusterTask
      workspaces:
        - name: manifest-dir
          workspace: pipeline-workspace
      params:
        - name: SCRIPT
          value: |
            echo "Updating deployment manifest..."
            sed -i "s|IMAGE_NAME_HERE|$(params.build-image)|g" deploy/deployment.yaml
            oc apply -f deploy/
            oc get pods -l app=accounts

    # 8️⃣ Cleanup
    - name: cleanup
      runAfter:
        - deploy
      taskSpec:
        steps:
          - name: cleanup-workspace
            image: alpine:3.17
            workingDir: /workspace/output
            script: |
              set -e
              find /workspace/output -type f -exec chmod 666 {} \;
              find /workspace/output -type d -exec chmod 777 {} \;
              rm -rf /workspace/output/* /workspace/output/.[!.]* || true

